! -------------------------------------------------------------------------
!
!                      OWI generator
!                  Part of Multistage tool
!
! --------------------------------------------------------------------------
! (0) reads u.srtd.csv and v.srtd.csv generated by download_fegs_data.sh
! (1) Remove duplicates that were not recognized by the 
! sort and uniq commands.
! Explanation:
!    GEFS should have the same value at the sahred corners of
!    two neighboring cells.
!    One cell may assign, for example, 2 m/s while 
!    neighboring cell assigns 2.0001 m/s
!    That's why it is not detected as duplicate.
!
! (2) Organize data points
! (3) calculate the average and std
! (4) Create 1st wind forcing from the ave.
!     2nd and 3rd forcings are generated from +-std
! ---------------------------------------------------------------------------

! ########################  S U B    R O U T I N E S  ########################
  subroutine remove_dublicate(filename,unt,i1,i2,i3,tmp)
  
  character(len=20), intent(in)                  :: filename
  integer, intent (in)                           :: i1, i2, i3
  real, allocatable, dimension(:,:), intent(out) :: tmp
  real                                           :: comp
  real                 :: LON, LAT
  real                 :: LON_0, LAT_0
  real                 :: diffLat, diffLon
  integer              :: io
  integer              :: k
  integer              :: n
  integer              :: unt

!
  open(unit=unt,file=filename)
!
! Allocating u and v vectors
!  n = 100000000    ! Assigning a big number since we don't know the size yet!
!  allocate(tmp(n,6))
!
! Reading initial
  read(unt,*)  LON, LAT, comp
  tmp(1,i1) = LON
  tmp(1,i2) = LAT
  tmp(1,i3) = comp
!
  io = 0.0
  k = 2
  do
  if (io.eq.0) then
!    Initials
     LON_0 = LON
     LAT_0 = LAT
     read(unt,*,iostat=io) LON, LAT, comp
     diffLon = abs(LON - LON_0)
     diffLat = abs(LAT - LAT_0)
     if (( diffLon.eq.0 ) .and. ( diffLat.eq.0 )) then
          write(*,*) 'Duplicate found for', comp, 'component of velocity' , LON, LAT, comp
     else
          tmp(k,i1) = LON
          tmp(k,i2) = LAT
          tmp(k,i3) = comp
          k = k + 1
     endif
  else
     go to 13
  endif
!
  enddo
13 continue

end subroutine remove_dublicate
! 
! Cleaning cache
! deallocate(tmp)
! ##################### E N D  O F  S U B  R O U T I N E S  #####################


  program genOWI
  implicit none
!
  character(len=100)   :: junkLine
  character(len=20)    :: filename
  integer              :: unt
  integer              :: p
  integer              :: ens
  integer              :: io
  integer              :: k
  integer              :: cnt
  integer              :: n
  integer              :: i1, i2, i3
  real                 :: LON, LAT
  real                 :: LON_0, LAT_0
  real                 :: u, v
  real                 :: diffLat, diffLon
  real, allocatable, dimension(:,:) :: temp
 
! n = 100000 
! allocate(tmp(n,6))
! 
  n = 100000000    ! Assigning a big number since we don't know the size yet!
  allocate(temp(n,6))


  filename='u_no_head.srtd.csv'
  unt=90
  i1=1
  i2=2
  i3=3
  call remove_dublicate(filename,unt,i1,i2,i3,temp)

  filename='v_no_head.srtd.csv'
  unt=91
  i1=4
  i2=5
  i3=6
  call remove_dublicate(filename,unt,i1,i2,i3,temp)

  end program genOWI
